// lib/advanced-analytics.ts - Í≥†Í∏â Ï∞®Ìä∏ Î∞è Î∂ÑÏÑù ÏãúÏä§ÌÖú
import { supabase } from './database-wellswap';

export interface MarketData {
  id: string;
  timestamp: string;
  total_volume: number;
  average_price: number;
  transaction_count: number;
  active_users: number;
  price_change_percent: number;
  volume_change_percent: number;
}

export interface AssetPerformance {
  asset_id: string;
  company_name: string;
  product_type: string;
  current_price: number;
  price_change: number;
  volume_24h: number;
  market_cap: number;
  liquidity_score: number;
  volatility: number;
}

export interface TradingPattern {
  pattern_type: 'trend' | 'reversal' | 'consolidation' | 'breakout';
  confidence: number;
  description: string;
  indicators: string[];
  recommendation: 'buy' | 'sell' | 'hold' | 'wait';
}

export interface RiskMetrics {
  asset_id: string;
  var_95: number; // Value at Risk (95% confidence)
  sharpe_ratio: number;
  beta: number;
  max_drawdown: number;
  correlation_matrix: Record<string, number>;
}

class AdvancedAnalyticsEngine {
  private marketDataCache: MarketData[] = [];
  private performanceCache: AssetPerformance[] = [];
  private riskMetricsCache: RiskMetrics[] = [];

  constructor() {
    this.initializeDataCollection();
  }

  // Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Ï¥àÍ∏∞Ìôî
  private async initializeDataCollection() {
    console.log('üìä Í≥†Í∏â Î∂ÑÏÑù ÏóîÏßÑ Ï¥àÍ∏∞Ìôî Ï§ë...');
    
    // Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    await this.loadMarketData();
    await this.calculatePerformanceMetrics();
    await this.calculateRiskMetrics();
    
    // Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ (5Î∂ÑÎßàÎã§)
    setInterval(async () => {
      await this.updateAnalytics();
    }, 5 * 60 * 1000);
    
    console.log('‚úÖ Í≥†Í∏â Î∂ÑÏÑù ÏóîÏßÑ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
  }

  // ÏãúÏû• Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  private async loadMarketData() {
    try {
      // market_data ÌÖåÏù¥Î∏îÏù¥ ÏóÜÏúºÎØÄÎ°ú Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
      this.marketDataCache = [
        {
          id: '1',
          timestamp: new Date().toISOString(),
          total_volume: 1000000,
          average_price: 50000,
          transaction_count: 10,
          active_users: 5,
          price_change_percent: 2.5,
          volume_change_percent: 15.0
        }
      ];
      console.log('üìà ÏãúÏû• Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å (Í∏∞Î≥∏ Î™®Îìú):', this.marketDataCache.length, 'Í∞ú');
    } catch (error) {
      console.error('‚ùå ÏãúÏû• Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
    }
  }

  // ÏÑ±Í≥º ÏßÄÌëú Í≥ÑÏÇ∞
  private async calculatePerformanceMetrics() {
    try {
      // insurance_assets ÌÖåÏù¥Î∏îÏù¥ ÏóÜÏúºÎØÄÎ°ú Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
      this.performanceCache = [
        {
          asset_id: '1',
          company_name: 'AIA Hong Kong',
          product_type: 'Life Insurance',
          current_price: 50000,
          price_change: 5.2,
          volume_24h: 250000,
          market_cap: 5000000,
          liquidity_score: 0.8,
          volatility: 0.12
        },
        {
          asset_id: '2',
          company_name: 'Prudential Hong Kong',
          product_type: 'Health Insurance',
          current_price: 35000,
          price_change: -2.1,
          volume_24h: 180000,
          market_cap: 3500000,
          liquidity_score: 0.7,
          volatility: 0.15
        }
      ];

      console.log('üìä ÏÑ±Í≥º ÏßÄÌëú Í≥ÑÏÇ∞ ÏôÑÎ£å (Í∏∞Î≥∏ Î™®Îìú):', this.performanceCache.length, 'Í∞ú');
    } catch (error) {
      console.error('‚ùå ÏÑ±Í≥º ÏßÄÌëú Í≥ÑÏÇ∞ Ïã§Ìå®:', error);
    }
  }

  // Î¶¨Ïä§ÌÅ¨ ÏßÄÌëú Í≥ÑÏÇ∞
  private async calculateRiskMetrics() {
    try {
      this.riskMetricsCache = this.performanceCache.map(asset => {
        const returns = this.calculateHistoricalReturns(asset.asset_id);
        const var95 = this.calculateVaR(returns, 0.95);
        const sharpeRatio = this.calculateSharpeRatio(returns);
        const beta = this.calculateBeta(asset.asset_id);
        const maxDrawdown = this.calculateMaxDrawdown(returns);
        const correlationMatrix = this.calculateCorrelationMatrix(asset.asset_id);

        return {
          asset_id: asset.asset_id,
          var_95: var95,
          sharpe_ratio: sharpeRatio,
          beta: beta,
          max_drawdown: maxDrawdown,
          correlation_matrix: correlationMatrix
        };
      });

      console.log('‚ö†Ô∏è Î¶¨Ïä§ÌÅ¨ ÏßÄÌëú Í≥ÑÏÇ∞ ÏôÑÎ£å:', this.riskMetricsCache.length, 'Í∞ú');
    } catch (error) {
      console.error('‚ùå Î¶¨Ïä§ÌÅ¨ ÏßÄÌëú Í≥ÑÏÇ∞ Ïã§Ìå®:', error);
    }
  }

  // Í±∞Îûò Ìå®ÌÑ¥ Î∂ÑÏÑù
  public analyzeTradingPatterns(assetId: string): TradingPattern {
    const asset = this.performanceCache.find(a => a.asset_id === assetId);
    if (!asset) {
      return {
        pattern_type: 'consolidation',
        confidence: 0,
        description: 'Îç∞Ïù¥ÌÑ∞ Î∂ÄÏ°±',
        indicators: [],
        recommendation: 'wait'
      };
    }

    const indicators: string[] = [];
    let patternType: TradingPattern['pattern_type'] = 'consolidation';
    let confidence = 0;
    let recommendation: TradingPattern['recommendation'] = 'hold';

    // Í∞ÄÍ≤© Î≥ÄÎèô Î∂ÑÏÑù
    if (Math.abs(asset.price_change) > 10) {
      indicators.push('Í∞ÄÍ≤© Í∏âÎ≥Ä');
      patternType = asset.price_change > 0 ? 'trend' : 'reversal';
      confidence += 30;
    }

    // Í±∞ÎûòÎüâ Î∂ÑÏÑù
    if (asset.volume_24h > 1000000) {
      indicators.push('Í±∞ÎûòÎüâ Í∏âÏ¶ù');
      confidence += 25;
    }

    // Î≥ÄÎèôÏÑ± Î∂ÑÏÑù
    if (asset.volatility > 0.15) {
      indicators.push('ÎÜíÏùÄ Î≥ÄÎèôÏÑ±');
      confidence += 20;
    }

    // Ïú†ÎèôÏÑ± Î∂ÑÏÑù
    if (asset.liquidity_score > 0.8) {
      indicators.push('ÎÜíÏùÄ Ïú†ÎèôÏÑ±');
      confidence += 15;
    }

    // Ï∂îÏ≤ú Í≤∞Ï†ï
    if (patternType === 'trend' && confidence > 60) {
      recommendation = asset.price_change > 0 ? 'buy' : 'sell';
    } else if (patternType === 'reversal' && confidence > 70) {
      recommendation = asset.price_change > 0 ? 'sell' : 'buy';
    } else if (confidence < 40) {
      recommendation = 'wait';
    }

    const descriptions = {
      trend: 'Î™ÖÌôïÌïú ÏÉÅÏäπ/ÌïòÎùΩ Ï∂îÏÑ∏Í∞Ä Í¥ÄÏ∞∞Îê©ÎãàÎã§',
      reversal: 'Ï∂îÏÑ∏ Ï†ÑÌôòÏù¥ ÏòàÏÉÅÎê©ÎãàÎã§',
      consolidation: 'Í∞ÄÍ≤©Ïù¥ ÏùºÏ†ï Î≤îÏúÑÏóêÏÑú Ìö°Î≥¥ÌïòÍ≥† ÏûàÏäµÎãàÎã§',
      breakout: 'Ï§ëÏöîÌïú ÏßÄÏßÄ/Ï†ÄÌï≠ÏÑ† ÎèåÌååÍ∞Ä ÏòàÏÉÅÎê©ÎãàÎã§'
    };

    return {
      pattern_type: patternType,
      confidence: Math.min(confidence, 100),
      description: descriptions[patternType],
      indicators,
      recommendation
    };
  }

  // ÏãúÏû• Ïã¨Î¶¨ ÏßÄÏàò Í≥ÑÏÇ∞
  public calculateMarketSentiment(): number {
    if (this.performanceCache.length === 0) return 50;

    const positiveAssets = this.performanceCache.filter(a => a.price_change > 0).length;
    const totalAssets = this.performanceCache.length;
    const sentiment = (positiveAssets / totalAssets) * 100;

    return Math.round(sentiment);
  }

  // Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏµúÏ†ÅÌôî Ï∂îÏ≤ú
  public getPortfolioRecommendations(): {
    highRisk: AssetPerformance[];
    mediumRisk: AssetPerformance[];
    lowRisk: AssetPerformance[];
  } {
    const sortedByRisk = this.performanceCache
      .map(asset => ({
        ...asset,
        riskScore: this.calculateRiskScore(asset.asset_id)
      }))
      .sort((a, b) => a.riskScore - b.riskScore);

    const third = Math.floor(sortedByRisk.length / 3);
    
    return {
      lowRisk: sortedByRisk.slice(0, third),
      mediumRisk: sortedByRisk.slice(third, third * 2),
      highRisk: sortedByRisk.slice(third * 2)
    };
  }

  // Ïã§ÏãúÍ∞Ñ Î∂ÑÏÑù ÏóÖÎç∞Ïù¥Ìä∏
  private async updateAnalytics() {
    await this.loadMarketData();
    await this.calculatePerformanceMetrics();
    await this.calculateRiskMetrics();
    console.log('üîÑ Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å');
  }

  // Ìó¨Ìçº Ìï®ÏàòÎì§
  private calculatePriceChange(assetId: string): number {
    // Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî Í≥ºÍ±∞ Í∞ÄÍ≤© Îç∞Ïù¥ÌÑ∞Î•º ÏÇ¨Ïö©
    return Math.random() * 20 - 10; // ÏûÑÏãú Íµ¨ÌòÑ
  }

  private calculate24hVolume(assetId: string): number {
    // Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî 24ÏãúÍ∞Ñ Í±∞ÎûòÎüâÏùÑ Í≥ÑÏÇ∞
    return Math.random() * 5000000; // ÏûÑÏãú Íµ¨ÌòÑ
  }

  private calculateLiquidityScore(asset: any): number {
    // Ïú†ÎèôÏÑ± Ï†êÏàò Í≥ÑÏÇ∞ (0-1)
    const factors = [
      asset.face_value > 1000000 ? 0.3 : 0.1,
      asset.asking_price > 50000 ? 0.3 : 0.1,
      asset.product_type === 'life' ? 0.4 : 0.2
    ];
    return Math.min(factors.reduce((sum, factor) => sum + factor, 0), 1);
  }

  private calculateVolatility(assetId: string): number {
    // Î≥ÄÎèôÏÑ± Í≥ÑÏÇ∞ (ÌëúÏ§ÄÌé∏Ï∞® Í∏∞Î∞ò)
    return Math.random() * 0.3; // ÏûÑÏãú Íµ¨ÌòÑ
  }

  private calculateHistoricalReturns(assetId: string): number[] {
    // Í≥ºÍ±∞ ÏàòÏùµÎ•† Îç∞Ïù¥ÌÑ∞ Î∞òÌôò
    return Array.from({ length: 30 }, () => Math.random() * 0.1 - 0.05);
  }

  private calculateVaR(returns: number[], confidence: number): number {
    // Value at Risk Í≥ÑÏÇ∞
    const sortedReturns = returns.sort((a, b) => a - b);
    const index = Math.floor((1 - confidence) * sortedReturns.length);
    return sortedReturns[index] || 0;
  }

  private calculateSharpeRatio(returns: number[]): number {
    // ÏÉ§ÌîÑ ÎπÑÏú® Í≥ÑÏÇ∞
    const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;
    const stdDev = Math.sqrt(returns.reduce((sum, r) => sum + Math.pow(r - avgReturn, 2), 0) / returns.length);
    return stdDev > 0 ? avgReturn / stdDev : 0;
  }

  private calculateBeta(assetId: string): number {
    // Î≤†ÌÉÄ Í≥ÑÏÇ∞
    return Math.random() * 2 - 0.5; // ÏûÑÏãú Íµ¨ÌòÑ
  }

  private calculateMaxDrawdown(returns: number[]): number {
    // ÏµúÎåÄ ÎÇôÌè≠ Í≥ÑÏÇ∞
    let peak = 1;
    let maxDrawdown = 0;
    let cumulative = 1;

    for (const ret of returns) {
      cumulative *= (1 + ret);
      if (cumulative > peak) {
        peak = cumulative;
      }
      const drawdown = (peak - cumulative) / peak;
      if (drawdown > maxDrawdown) {
        maxDrawdown = drawdown;
      }
    }

    return maxDrawdown;
  }

  private calculateCorrelationMatrix(assetId: string): Record<string, number> {
    // ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ ÌñâÎ†¨ Í≥ÑÏÇ∞
    return {
      'market_index': Math.random() * 2 - 1,
      'sector_index': Math.random() * 2 - 1,
      'risk_free_rate': Math.random() * 0.5
    };
  }

  private calculateRiskScore(assetId: string): number {
    const riskMetrics = this.riskMetricsCache.find(r => r.asset_id === assetId);
    if (!riskMetrics) return 0.5;

    // Î¶¨Ïä§ÌÅ¨ Ï†êÏàò Í≥ÑÏÇ∞ (0-1, ÎÜíÏùÑÏàòÎ°ù ÏúÑÌóò)
    const factors = [
      riskMetrics.var_95 * 10,
      (1 - riskMetrics.sharpe_ratio) * 0.5,
      Math.abs(riskMetrics.beta) * 0.3,
      riskMetrics.max_drawdown
    ];

    return Math.min(factors.reduce((sum, factor) => sum + factor, 0), 1);
  }

  // Í≥µÍ∞ú API
  public getMarketData(): MarketData[] {
    return this.marketDataCache;
  }

  public getPerformanceData(): AssetPerformance[] {
    return this.performanceCache;
  }

  public getRiskMetrics(): RiskMetrics[] {
    return this.riskMetricsCache;
  }

  public getTopPerformers(limit: number = 5): AssetPerformance[] {
    return this.performanceCache
      .sort((a, b) => b.price_change - a.price_change)
      .slice(0, limit);
  }

  public getMostVolatile(limit: number = 5): AssetPerformance[] {
    return this.performanceCache
      .sort((a, b) => b.volatility - a.volatility)
      .slice(0, limit);
  }

  public getMarketTrend(): 'bullish' | 'bearish' | 'neutral' {
    const sentiment = this.calculateMarketSentiment();
    if (sentiment > 60) return 'bullish';
    if (sentiment < 40) return 'bearish';
    return 'neutral';
  }
}

// Ïã±Í∏ÄÌÜ§ Ïù∏Ïä§ÌÑ¥Ïä§
export const advancedAnalyticsEngine = new AdvancedAnalyticsEngine();
